Kapselung (Encapsulation) ist ein Prinzip der Objektorientierten Programmierung (OOP), das darauf abzielt, Daten und Methoden innerhalb einer Klasse zu verbergen und nur über definierte Schnittstellen darauf zuzugreifen.

Vorteile der Kapselung:

Schutz von Daten vor unbeabsichtigtem Ändern

Verbesserung der Wartbarkeit durch klar definierte Zugriffsmethoden

Reduzierung der Komplexität durch Verbergen von Implementierungsdetails

Ermöglichung von Kontrollmechanismen (z. B. Validierung von Werten)


Zugriffsmodifikatoren in Python
Python kennt keine strikten Zugriffsmodifikatoren wie private, protected oder public (wie z. B. in Java oder C#). Stattdessen nutzt es Namenskonventionen, um die Sichtbarkeit von Attributen und Methoden zu kennzeichnen:

Syntax	            Modifikator             Bedeutung

public_var	        Public	                Öffentlich, von überall zugänglich
_protected_var	    Protected	            Geschützt, nur innerhalb der Klasse und Unterklassen gedacht (kein echter Schutz)
__private_var	    Private	Privat,         durch Namensänderung schwer zugänglich, aber nicht vollständig versteckt


Die beste Lösung für Kapselung ist der Zugriff über Getter und Setter-Methoden:

Kontrolle über Daten (z. B. Validierung)

Verhindert versehentliche Manipulation


Kapselung schützt Daten und erleichtert Wartung und Debugging.

Python erzwingt den Schutz nicht, aber Konventionen (_protected, __private) helfen.

Beste Praxis: Getter und Setter mit @property, um Zugriff zu steuern.


@property Beispiel:

class Auto:
    def __init__(self, marke, geschwindigkeit):
        self.__marke = marke  

    @property
    def marke(self):  # Getter
        return self.__marke

    @marke.setter
    def marke(self, neue_marke):  # Setter
        if neue_marke:  
            self.__marke = neue_marke



#####################################################################################################
Sequenzdiagramm

Ein Sequenzdiagramm ist eine Diagrammart der Unified Modeling Language (UML), die das dynamische Verhalten eines Systems darstellt.
Es zeigt, wie Objekte miteinander interagieren, indem es den zeitlichen Ablauf von Nachrichten und Methodenaufrufen zwischen ihnen visualisiert.

Sequenzdiagramme werden verwendet, um:

Abläufe in Software-Systemen zu modellieren (z. B. API-Aufrufe, Benutzerinteraktionen)

Interaktionen zwischen Objekten oder Systemkomponenten zu verstehen

Fehlersuche und Optimierung zu erleichtern

Kommunikation zwischen Entwicklern und Stakeholdern zu verbessern

Typische Anwendungsfälle:
Use-Case-Szenarien (z. B. Benutzer meldet sich an)
Kommunikation zwischen Microservices
Ablauf in verteilten Systemen

Grundelemente eines Sequenzdiagramms:

Akteure und Objekte
Akteure: Externe Benutzer oder Systeme, die mit dem System interagieren (z. B. Kunde, Admin).

Objekte: Klassen oder Komponenten im System (z. B. Datenbank, Bestellverwaltung).

Darstellung: Akteure und Objekte werden als rechteckige Boxen mit Namen dargestellt.


Lebenslinien (Lifelines)
Jeder Akteur oder jedes Objekt erhält eine vertikale gestrichelte Linie, die seine Existenz während der Interaktion darstellt.

Die Lebenslinie beginnt am oberen Rand und geht nach unten.

Nachrichten und Methodenaufrufe
Synchrone Nachricht : Der Sender wartet auf die Antwort.

Asynchrone Nachricht : Der Sender fährt fort, ohne auf eine Antwort zu warten.

Antwort : Rückgabe eines Wertes oder einer Bestätigung.


Aktivierungsbalken (Execution Specification)
Zeigt an, wann ein Objekt aktiv ist (z. B. beim Bearbeiten einer Anfrage).

Dargestellt als dicker vertikaler Balken auf der Lebenslinie.


Kontrollstrukturen
Alternative (alt): Zeigt eine Entscheidung mit mehreren Möglichkeiten.

Schleife (loop): Wiederholt eine Aktion.

Optionale Aktion (opt): Bedingte Ausführung einer Nachricht.