From 33352280e09c7f4a1e8798cc39f4cb84b7926701 Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Thu, 3 Apr 2025 14:40:46 +0200
Subject: [PATCH 2/5] =?UTF-8?q?aufgaben/kw13=5Fzusetzaufgabe.py=20=C2=B4me?=
 =?UTF-8?q?rges=202025.04.03?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 aufgaben/kw14_aufgabe11.py | 132 +++++++++++++++++++++++++++++++++++++
 1 file changed, 132 insertions(+)

diff --git a/aufgaben/kw14_aufgabe11.py b/aufgaben/kw14_aufgabe11.py
index f04e02a..301a8b9 100644
--- a/aufgaben/kw14_aufgabe11.py
+++ b/aufgaben/kw14_aufgabe11.py
@@ -85,3 +85,135 @@ shop.produkt_hinzufuegen(produkt2)
 
 # Ausgabe des Shops
 print(shop)
+
+
+
+
+
+
+# Aufgabe 6 online-shop
+
+class OnlineShop:
+
+    def __init__(self, produkte):
+        self.produkte = produkte
+        self.zuletztAufsteigend = True
+    
+    def __str__(self):
+        tabellarische_auflistung = ""
+        for product in self.produkte:
+            bezeichnung = product[0]
+            preis = product[1]
+            tabellarische_auflistung += "- "
+            tabellarische_auflistung += bezeichnung # Produktname links
+            tabellarische_auflistung += ":" # Tab-Space zwischen Name und Preis
+            tabellarische_auflistung += str(preis)
+            tabellarische_auflistung += "\n"
+        return f"{tabellarische_auflistung}"
+    
+    def produkteUnsortiert(self, ascending):
+         # gibt True zurück, wenn produkte unsortiert, und False, falls nicht!
+        counter = 0
+
+        for i in range(len(self.produkte) - 1):
+            aktueller_preis = self.produkte[i][1]
+            naechster_preis = self.produkte[i + 1][1]
+            diff = naechster_preis - aktueller_preis
+            if ascending and diff > 0:
+                counter += 1
+            elif not ascending and diff < 0:
+                counter += 1
+    
+        if counter == (len(self.produkte) - 1):
+            if ascending:
+                print("Produkte bereits aufsteigend sortiert!")
+            elif not ascending:
+                print("Produkte bereits absteigend sortiert!")
+            return False
+        return True
+
+    def sortProducts(self, ascending = True):
+        self.zuletztAufsteigend = ascending
+        if self.produkteUnsortiert(ascending):
+            for i in range(len(self.produkte)):
+                for j in range(len(self.produkte) - i - 1):
+                    if (self.produkte[j + 1][1] < self.produkte[j][1]) and ascending:
+                        self.produkte[j], self.produkte[j + 1] = self.produkte[j + 1], self.produkte[j]
+                    elif (self.produkte[j + 1][1] > self.produkte[j][1]) and not ascending:
+                        self.produkte[j], self.produkte[j + 1] = self.produkte[j + 1], self.produkte[j]
+    
+    def produktInListe(self, produktname):
+        produkt_nicht_enthalten = True
+        for produkt in self.produkte:
+            bezeichnung = produkt[0]
+            if bezeichnung == produktname:
+                produkt_nicht_enthalten = False
+                preis = produkt[1]
+                print(f"Produkt {produktname} kostet {preis} €!")
+                return True
+        if produkt_nicht_enthalten:
+            print(produktname + " (noch) nicht in Liste enthalten!")
+            return False
+    
+    def addProduct(self, name, preis):
+        if not self.produktInListe(name):
+            self.produkte.append([name, preis])
+        else:
+            for i in range(len(self.produkte)):
+                produkt_bezeichnung = self.produkte[i][0]
+                if produkt_bezeichnung == name:
+                    self.produkte[i][1] = preis
+        self.sortProducts(self.zuletztAufsteigend)
+    
+    def removeProduct(self, product):
+        if self.produktInListe(product):
+            gesuchte_teilliste = [product]
+            for i in range(len(self.produkte)):
+                sortiment_produkt = self.produkte[i]
+                sortiment_produkt_bezeichnung = sortiment_produkt[0]
+                sortiment_produkt_preis = sortiment_produkt[1]
+                if product == sortiment_produkt_bezeichnung:
+                    gesuchte_teilliste.append(sortiment_produkt_preis)
+            self.produkte.remove(gesuchte_teilliste)
+        else:
+            print(f"Das Produkt mit der Bezeichnung {product} befindet sich noch nicht im Sortiment!")
+
+# TESTEN:
+produkte = [['Laptop', 1200], ['Smartphone', 800], ['Tablet', 500], ['Monitor', 300], ['Maus', 50]]
+
+# Instanz erzeugen
+mein_shop = OnlineShop(produkte)
+
+# Objekt / Instanz als String ausgeben (Konsole)
+print(mein_shop)
+
+# überprüfen, ob Produkte unsortiert sind
+print(mein_shop.produkteUnsortiert(True))
+
+# produkte sortieren
+mein_shop.sortProducts(True)
+print(mein_shop)
+#print(mein_shop.produkteUnsortiert(True))
+
+# produkt in Liste vorhanden (Überprüfung)
+produkt = ['iPhone', 650]
+mein_shop.produktInListe(produkt[0])
+
+# iPhone hinzufügen
+mein_shop.addProduct(produkt[0], produkt[1])
+print(mein_shop)
+
+# Versuch, bereits vorhandenes Produkt hinzuzufügen:
+neues_produkt = ['iPhone', 1000]
+mein_shop.addProduct(neues_produkt[0], neues_produkt[1])
+print(mein_shop)
+
+# Produkt entfernen:
+mein_shop.removeProduct(neues_produkt[0])
+mein_shop.removeProduct("Nintendo Switch")
+print(mein_shop)
+
+mein_shop.addProduct("Drucker", 1000)
+mein_shop.sortProducts(False)
+print(mein_shop)
+
-- 
2.47.1.windows.2

